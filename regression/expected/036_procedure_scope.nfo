// Automatically generated by GRFCODEC. Do not modify!
// (Info version 32)
// Escapes: 2+ 2- 2< 2> 2u< 2u> 2/ 2% 2u/ 2u% 2* 2& 2| 2^ 2sto = 2s 2rst = 2r 2psto 2ror = 2rot 2cmp 2ucmp 2<< 2u>> 2>>
// Escapes: 71 70 7= 7! 7< 7> 7G 7g 7gG 7GG 7gg 7c 7C
// Escapes: D= = DR D+ = DF D- = DC Du* = DM D* = DnF Du<< = DnC D<< = DO D& D| Du/ D/ Du% D%
// Format: spritenum imagefile depth xpos ypos xsize ysize xrel yrel zoom flags

0 * 4 \d18

1 * 54 14 "C" "INFO"
"B" "VRSN" \w4 \dx00000000
"B" "MINV" \w4 \dx00000000
"B" "NPAR" \w1 00
"B" "PALS" \w1 "A"
"B" "BLTR" \w1 "8"
00
00
2 * 52 08 08 "NML\36" "NML regression test" 00 "A test newgrf testing NML" 00
// Name: @return_action_0
3 * 20 02 0A FF 8A
1A 20 \dx00000000
\2sto 1A 00 \dx00000000
\b0
\wx8000 // Return computed value

// Name: proc_call_optimisation
4 * 23 02 0A FF 8A
82 00 \dx0000FFFF
\b1
\wx8000 \dx00000000 \dx00000000 	// 0 .. 0: return 0;
\wx00FF // default: return STORE_TEMP(0, 0)

// Name: @ternary_action_0
5 * 24 02 0A FF 89
7E FF 00 \dxFFFFFFFF 	// proc_call_optimisation
\b1
\wx00FF \dx00000000 \dx00000000 	// proc_call_optimisation;
\wx8001 // return 1;

// Name: ternary_optimisation
6 * 24 02 0A FF 89
7E FF 00 \dxFFFFFFFF 	// @ternary_action_0
\b1
\wx8000 \dx00000001 \dx00000000 	// Bogus range to avoid nvar == 0
\wx8005 // default: return 5;

// Name: dumb_add
// a : register 88
// b : register 89
7 * 22 02 0A FE 89
7D 88 20 \dxFFFFFFFF 	// a
\2+ 7D 89 00 \dxFFFFFFFF 	// b
\b0
\wx8000 // Return computed value

// Name: @return_action_0
8 * 66 02 0A FD 8A
1A 20 \dx00000005
\2sto 1A 20 \dx00000088
\2r 7D 86 20 \dxFFFFFFFF 	// a
\2sto 1A 20 \dx00000089
\2r 7E FE 20 \dxFFFFFFFF 	// dumb_add(5, a)
\2sto 1A 20 \dx00000087
\2r 7D 86 20 \dxFFFFFFFF 	// a
\2+ 7D 87 00 \dxFFFFFFFF
\b0
\wx8000 // Return computed value

// Name: @return_action_1
9 * 66 02 0A FC 8A
1A 20 \dx00000006
\2sto 1A 20 \dx00000088
\2r 7D 86 20 \dxFFFFFFFF 	// a
\2sto 1A 20 \dx00000089
\2r 7E FE 20 \dxFFFFFFFF 	// dumb_add(6, a)
\2sto 1A 20 \dx00000087
\2r 7D 86 20 \dxFFFFFFFF 	// a
\2+ 7D 87 00 \dxFFFFFFFF
\b0
\wx8000 // Return computed value

// Name: callee
// a : register 86
10 * 110 02 0A FC 8A
92 22 \dx00000001
\2* 1A 20 \dx00000004
\2sto 1A 20 \dx00000087
\2r B6 20 \dx0000FFFF
\2- 7D 87 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000088
\2r 92 21 \dx00000001
\2u< 1A 20 \dx00000001
\2* 1A 20 \dx000001F3 	// expr1 - expr2
\2+ 1A 20 \dx00000001
\2+ 82 20 \dx0000FFFF
\2* 7D 88 20 \dxFFFFFFFF
\2+ 7D 86 00 \dxFFFFFFFF 	// a
\b1
\wx00FD \dx00000000 \dx00000005 	// 0 .. 5: return (a + dumb_add(5, a))
\wx00FC // default: return (a + dumb_add(6, a))

// Name: caller2
11 * 232 02 0A FD 89
B3 20 \dx00000003
\2+ AA 20 \dx0000FFFF
\2sto 1A 20 \dx00000080
\2r 45 30 \dx00000003
\2+ 44 20 \dx000000FF
\2sto 1A 20 \dx00000081
\2r 1A 20 \dx00000001
\2sto 1A 20 \dx00000086
\2r 7E FC 20 \dxFFFFFFFF 	// callee(1)
\2+ 5F 28 \dx0000FFFF
\2sto 1A 20 \dx00000082
\2r 43 20 \dxFFFFFFFF
\2+ 45 38 \dx0000000F
\2sto 1A 20 \dx00000083
\2r 1A 20 \dx00000001
\2sto 1A 20 \dx00000084
\2r 45 3C \dx0000000F
\2sto 1A 20 \dx00000088
\2r 46 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000089
\2r 7E FE 20 \dxFFFFFFFF 	// dumb_add(var[0x45, 28, 15], var[0x46, 0, -1])
\2sto 1A 20 \dx00000085
\2r 7D 84 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000088
\2r 7D 85 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000089
\2r 7E FE 20 \dxFFFFFFFF 	// dumb_add(1, dumb_add(var[0x45, 28, 15], var[0x46, 0, -1]))
\2* 7D 83 20 \dxFFFFFFFF
\2* 7D 82 20 \dxFFFFFFFF
\2* 7D 81 20 \dxFFFFFFFF
\2* 7D 80 00 \dxFFFFFFFF
\b0
\wx8000 // Return computed value

// Name: caller1
12 * 145 02 0A FE 89
B3 20 \dx00000003
\2+ AA 20 \dx0000FFFF
\2sto 1A 20 \dx00000080
\2r 5F 28 \dx0000FFFF
\2sto 1A 20 \dx00000081
\2r 1A 20 \dx00000000
\2sto 1A 20 \dx00000086
\2r 7E FC 20 \dxFFFFFFFF 	// callee(0)
\2sto 1A 20 \dx00000082
\2r 7D 81 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000088
\2r 7D 82 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000089
\2r 7E FE 20 \dxFFFFFFFF 	// dumb_add(var[0x5F, 8, 65535], callee(0))
\2sto 1A 20 \dx00000083
\2r 45 3C \dx0000000F
\2+ 46 20 \dxFFFFFFFF
\2* 7D 83 20 \dxFFFFFFFF
\2* 7D 80 00 \dxFFFFFFFF
\b0
\wx8000 // Return computed value

13 * 11 00 0A \b2 01 FF \wx0000
08 00
09 00

14 * 11 00 0A \b2 01 FF \wx0000
21 01
22 42

// Name: @CB_FAILED_PROD
15 * 15 02 0A FC 00 \wx0000 \wx0000 \wx0000 \wx0000 \wx0000 00

// Name: @CB_FAILED0A
16 * 23 02 0A FC 89
0C 00 \dx0000FFFF
\b1
\wx8000 \dx00000000 \dx00000000 	// graphics callback -> return 0
\wx00FC // Non-graphics callback, return graphics result

// Name: @action3_0
17 * 43 02 0A FC 89
0C 00 \dx0000FFFF
\b3
\wx00FF \dx00000022 \dx00000022 	// ternary_optimisation;
\wx00FD \dx0000003B \dx0000003B 	// caller2;
\wx00FE \dx0000015F \dx0000015F 	// caller1;
\wx00FC // @CB_FAILED0A;

18 * 7 03 0A 01 00 \b0
\wx00FC 	// @action3_0;

