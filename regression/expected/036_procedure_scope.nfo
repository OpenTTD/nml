// Automatically generated by GRFCODEC. Do not modify!
// (Info version 32)
// Escapes: 2+ 2- 2< 2> 2u< 2u> 2/ 2% 2u/ 2u% 2* 2& 2| 2^ 2sto = 2s 2rst = 2r 2psto 2ror = 2rot 2cmp 2ucmp 2<< 2u>> 2>>
// Escapes: 71 70 7= 7! 7< 7> 7G 7g 7gG 7GG 7gg 7c 7C
// Escapes: D= = DR D+ = DF D- = DC Du* = DM D* = DnF Du<< = DnC D<< = DO D& D| Du/ D/ Du% D%
// Format: spritenum imagefile depth xpos ypos xsize ysize xrel yrel zoom flags

0 * 4 \d18

1 * 54 14 "C" "INFO"
"B" "VRSN" \w4 \dx00000000
"B" "MINV" \w4 \dx00000000
"B" "NPAR" \w1 00
"B" "PALS" \w1 "A"
"B" "BLTR" \w1 "8"
00
00
2 * 52 08 09 "NML\36" "NML regression test" 00 "A test newgrf testing NML" 00
// Name: @return_action_0
3 * 22 02 0A \wx7FFF 8A
1A 20 \dx00000000
\2sto 1A 00 \dx00000000
\w0
\wx8000 // Return computed value

// Name: proc_call_optimisation
4 * 25 02 0A \wx7FFF 8A
82 00 \dx0000FFFF
\w1
\wx8000 \dx00000000 \dx00000000 	// 0 .. 0: return 0;
\wx7FFF // default: return STORE_TEMP(0, 0)

// Name: @ternary_action_0
5 * 27 02 0A \wx7FFF 89
7E \wx7FFF 00 \dxFFFFFFFF 	// proc_call_optimisation
\w1
\wx7FFF \dx00000000 \dx00000000 	// proc_call_optimisation;
\wx8001 // return 1;

// Name: @CB_FAILED_PROD
6 * 16 02 0A \wx7FFE 00 \wx0000 \wx0000 \wx0000 \wx0000 \wx0000 00

// Name: @CB_FAILED0A
7 * 25 02 0A \wx7FFE 89
0C 00 \dx0000FFFF
\w1
\wx8000 \dx00000000 \dx00000000 	// graphics callback -> return 0
\wx7FFE // Non-graphics callback, return graphics result

// Name: ternary_optimisation
8 * 27 02 0A \wx7FFF 89
7E \wx7FFF 00 \dxFFFFFFFF 	// @ternary_action_0
\w1
\wx7FFE \dx00000001 \dx00000000 	// Bogus range to avoid nvar == 0
\wx8005 // default: return 5;

// Name: dumb_add
// a : register 88
// b : register 89
9 * 30 02 0A \wx7FFD 89
7D \dx00000088 20 \dxFFFFFFFF 	// a
\2+ 7D \dx00000089 00 \dxFFFFFFFF 	// b
\w0
\wx8000 // Return computed value

// Name: @return_action_0
10 * 78 02 0A \wx7FFC 8A
1A 20 \dx00000005
\2sto 1A 20 \dx00000088
\2r 7D \dx00000086 20 \dxFFFFFFFF 	// a
\2sto 1A 20 \dx00000089
\2r 7E \wx7FFD 20 \dxFFFFFFFF 	// dumb_add(5, a)
\2sto 1A 20 \dx00000087
\2r 7D \dx00000086 20 \dxFFFFFFFF 	// a
\2+ 7D \dx00000087 00 \dxFFFFFFFF
\w0
\wx8000 // Return computed value

// Name: @return_action_1
11 * 78 02 0A \wx7FFB 8A
1A 20 \dx00000006
\2sto 1A 20 \dx00000088
\2r 7D \dx00000086 20 \dxFFFFFFFF 	// a
\2sto 1A 20 \dx00000089
\2r 7E \wx7FFD 20 \dxFFFFFFFF 	// dumb_add(6, a)
\2sto 1A 20 \dx00000087
\2r 7D \dx00000086 20 \dxFFFFFFFF 	// a
\2+ 7D \dx00000087 00 \dxFFFFFFFF
\w0
\wx8000 // Return computed value

// Name: callee
// a : register 86
12 * 121 02 0A \wx7FFB 8A
92 22 \dx00000001
\2* 1A 20 \dx00000004
\2sto 1A 20 \dx00000087
\2r B6 20 \dx0000FFFF
\2- 7D \dx00000087 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000088
\2r 92 21 \dx00000001
\2u< 1A 20 \dx00000001
\2* 1A 20 \dx000001F3 	// expr1 - expr2
\2+ 1A 20 \dx00000001
\2+ 82 20 \dx0000FFFF
\2* 7D \dx00000088 20 \dxFFFFFFFF
\2+ 7D \dx00000086 00 \dxFFFFFFFF 	// a
\w1
\wx7FFC \dx00000000 \dx00000005 	// 0 .. 5: return (a + dumb_add(5, a))
\wx7FFB // default: return (a + dumb_add(6, a))

// Name: caller2
13 * 255 02 0A \wx7FFC 89
B3 20 \dx00000003
\2+ AA 20 \dx0000FFFF
\2sto 1A 20 \dx00000080
\2r 45 30 \dx00000003
\2+ 44 20 \dx000000FF
\2sto 1A 20 \dx00000081
\2r 1A 20 \dx00000001
\2sto 1A 20 \dx00000086
\2r 7E \wx7FFB 20 \dxFFFFFFFF 	// callee(1)
\2+ 5F 28 \dx0000FFFF
\2sto 1A 20 \dx00000082
\2r 43 20 \dxFFFFFFFF
\2+ 45 38 \dx0000000F
\2sto 1A 20 \dx00000083
\2r 1A 20 \dx00000001
\2sto 1A 20 \dx00000084
\2r 45 3C \dx0000000F
\2sto 1A 20 \dx00000088
\2r 46 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000089
\2r 7E \wx7FFD 20 \dxFFFFFFFF 	// dumb_add(var[0x45, 28, 15], var[0x46, 0, -1])
\2sto 1A 20 \dx00000085
\2r 7D \dx00000084 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000088
\2r 7D \dx00000085 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000089
\2r 7E \wx7FFD 20 \dxFFFFFFFF 	// dumb_add(1, dumb_add(var[0x45, 28, 15], var[0x46, 0, -1]))
\2* 7D \dx00000083 20 \dxFFFFFFFF
\2* 7D \dx00000082 20 \dxFFFFFFFF
\2* 7D \dx00000081 20 \dxFFFFFFFF
\2* 7D \dx00000080 00 \dxFFFFFFFF
\w0
\wx8000 // Return computed value

// Name: caller1
14 * 161 02 0A \wx7FFD 89
B3 20 \dx00000003
\2+ AA 20 \dx0000FFFF
\2sto 1A 20 \dx00000080
\2r 5F 28 \dx0000FFFF
\2sto 1A 20 \dx00000081
\2r 1A 20 \dx00000000
\2sto 1A 20 \dx00000086
\2r 7E \wx7FFB 20 \dxFFFFFFFF 	// callee(0)
\2sto 1A 20 \dx00000082
\2r 7D \dx00000081 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000088
\2r 7D \dx00000082 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000089
\2r 7E \wx7FFD 20 \dxFFFFFFFF 	// dumb_add(var[0x5F, 8, 65535], callee(0))
\2sto 1A 20 \dx00000083
\2r 45 3C \dx0000000F
\2+ 46 20 \dxFFFFFFFF
\2* 7D \dx00000083 20 \dxFFFFFFFF
\2* 7D \dx00000080 00 \dxFFFFFFFF
\w0
\wx8000 // Return computed value

15 * 11 00 0A \b2 \wx0001 \wx0000
08 00
09 00

16 * 11 00 0A \b2 \wx0001 \wx0000
21 01
22 42

// Name: @action3_0
17 * 45 02 0A \wx7FFE 89
0C 00 \dx0000FFFF
\w3
\wx7FFF \dx00000022 \dx00000022 	// ternary_optimisation;
\wx7FFC \dx0000003B \dx0000003B 	// caller2;
\wx7FFD \dx0000015F \dx0000015F 	// caller1;
\wx7FFE // @CB_FAILED0A;

18 * 10 03 0A \wx0001 \wx0000 \w0
\wx7FFE 	// @action3_0;

