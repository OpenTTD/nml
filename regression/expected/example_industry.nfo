// Automatically generated by GRFCODEC. Do not modify!
// (Info version 32)
// Escapes: 2+ 2- 2< 2> 2u< 2u> 2/ 2% 2u/ 2u% 2* 2& 2| 2^ 2sto = 2s 2rst = 2r 2psto 2ror = 2rot 2cmp 2ucmp 2<< 2u>> 2>>
// Escapes: 71 70 7= 7! 7< 7> 7G 7g 7gG 7GG 7gg 7c 7C
// Escapes: D= = DR D+ = DF D- = DC Du* = DM D* = DnF Du<< = DnC D<< = DO D& D| Du/ D/ Du% D%
// Format: spritenum imagefile depth xpos ypos xsize ysize xrel yrel zoom flags

0 * 4 \d22

1 * 54 14 "C" "INFO"
"B" "VRSN" \w4 \dx00000001
"B" "MINV" \w4 \dx00000001
"B" "NPAR" \w1 00
"B" "PALS" \w1 "A"
"B" "BLTR" \w1 "8"
00
00
2 * 165 08 09 "NML\04" "NML Example NewGRF: Industry" 00 "\8ENML Example NewGRF: Industry\0D\98This NewGRF is intended to provide a coding example for the high-level NewGRF-coding language NML." 00
3 * 38 04 00 FF \wx0001 \wxD000 "\0DGoods produced this month: \90\7C" 00

4 * 52 00 08 \b1 \wx000B \wx0000
09 "PASS" "COAL" "MAIL" "OIL_" "LVST"
"GOOD" "GRAI" "WOOD" "IORE" "STEL"
"VALU"

// Name: consume_all_prod
5 * 23 02 0A \wx7FFF 02 \b3 \wx0001 01 \wx0008 02 \wx0006 03 \b2 \wx0009 80 \wx0005 81 82

// Name: consume_all_prod@registers
6 * 93 02 0A \wx7FFF 89
7D \dx00000001 20 \dxFFFFFFFF
\2/ 1A 20 \dx00000002
\2+ 7D \dx00000002 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000080
\2r 7D \dx00000003 20 \dxFFFFFFFF
\2* 1A 20 \dx00000002
\2sto 1A 20 \dx00000081
\2r 1A 20 \dx00000000
\2sto 1A 00 \dx00000082
\w1
\wx7FFF \dx00000000 \dx00000000
\wx7FFF //

// Name: do_nothing_prod
7 * 8 02 0A \wx7FFE 02 \b0 \b0 80

// Name: do_nothing_prod@registers
8 * 32 02 0A \wx7FFE 89
1A 20 \dx00000000
\2sto 1A 00 \dx00000080
\w1
\wx7FFE \dx00000000 \dx00000000
\wx7FFE //

// Name: factory_production_switch
9 * 83 02 0A \wx7FFF 89
6F \dx00000001 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000001
\2r 6F \dx00000008 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000002
\2r 6F \dx00000006 20 \dxFFFFFFFF
\2sto 1A 20 \dx00000003
\2r 6F \dx00000001 00 \dxFFFFFFFF
\w1
\wx7FFE \dx00000000 \dx00000000 	// 0 .. 0: do_nothing_prod;
\wx7FFF // default: consume_all_prod;

// Name: @CB_FAILED_PROD
10 * 16 02 0A \wx7FFE 00 \wx0000 \wx0000 \wx0000 \wx0000 \wx0000 00

// Name: @CB_FAILED0A
11 * 25 02 0A \wx7FFE 89
0C 00 \dx0000FFFF
\w1
\wx8000 \dx00000000 \dx00000000 	// graphics callback -> return 0
\wx7FFE // Non-graphics callback, return graphics result

// Name: extra_text_switch
12 * 36 02 0A \wx7FFD 89
6A \dx00000005 20 \dxFFFFFFFF
\2sto 1A 00 \dx00000100
\w1
\wx7FFE \dx00000001 \dx00000000 	// Bogus range to avoid nvar == 0
\wx8000 // default: return string(STR_INDUSTRY_EXTRA_TEXT);

13 * 35 00 0A \b6 \wx0001 \wx0000
08 06
09 06
25 \w2
\wx0009 \wx0005
26 \w3
\wx0001 \wx0008 \wx0006
27 \w2
00 00
28 \b0 \b0
14 * 11 00 0A \b2 \wx0001 \wx0000
21 02
22 01

// Name: @action3_0
15 * 25 02 0A \wx7FFF 89
18 00 \dx000000FF
\w1
\wx7FFF \dx00000000 \dx00000000 	// factory_production_switch;
\wx7FFE // @CB_FAILED0A;

// Name: @action3_1
16 * 35 02 0A \wx7FFE 89
0C 00 \dx0000FFFF
\w2
\wx7FFF \dx00000000 \dx00000000 	// @action3_0;
\wx7FFD \dx0000003A \dx0000003A 	// extra_text_switch;
\wx7FFE // @CB_FAILED0A;

17 * 10 03 0A \wx0001 \wx0000 \w0
\wx7FFE 	// @action3_1;

18 * 13 00 09 \b3 \wx0001 \wx0000
08 27
09 27
12 02

19 * 13 00 09 \b3 \wx0001 \wx0001
08 28
09 28
12 02

20 * 13 00 09 \b3 \wx0001 \wx0002
08 29
09 29
12 02

21 * 13 00 09 \b3 \wx0001 \wx0003
08 2A
09 2A
12 02

22 * 32 00 0A \b6 \wx0001 \wx0001
08 09
09 09
25 \w3
\wx0004 \wx0006 \wx0007
26 \w0
27 \w3
08 0C 04
28 \b0 \b0
